# 色块监测
# 通过find_blobs()函数来查找图像中的色块
# 查找黑色

import sensor（引入感光元件）, image, time

# 颜色追踪的例子，一定要控制环境的光，保持光线是稳定的。
black_threshold   = (   9,   13,  -7,   12,   -8,   6)
					#*(0, 63, -10, 15, -10, 14)
#设置黑色的阈值，括号里面的数值分别是L A B 的最大值和最小值（minL：0, maxL：100, mina：-128,
# maxA：127, minB：-128, maxB：127），LAB的值在图像的三个坐标图中选取。如果是灰度图，则只需
#设置（min, max）两个数字即可。

sensor.reset() # 初始化摄像头
sensor.set_pixformat(sensor.RGB565) # 格式为 RGB565.调整为彩色
                                # sensor.set_pixformat() 设置像素模式。
# sensor.GRAYSCALE: 灰度，每个像素8bit。
# sensor.RGB565: 彩色，每个像素16bit。
sensor.set_framesize(sensor.QQVGA) # 设置图片大小，使用 QQVGA 速度快一些
# sensor.QQCIF: 88x72
# sensor.QCIF: 176x144
# sensor.CIF: 352x288 
# sensor.QQSIF: 88x60
# sensor.QSIF: 176x120
# sensor.SIF: 352x240
# sensor.QQQQVGA: 40x30
# sensor.QQQVGA: 80x60
# sensor.QQVGA: 160x120
								# sensor.QVGA: 320x240
								# sensor.VGA: 640x480
								# sensor.HQQQVGA: 80x40
								# sensor.HQQVGA: 160x80
								# sensor.HQVGA: 240x160
								# sensor.B64X32: 64x32 (用于帧差异 image.find_displacement())
								# sensor.B64X64: 64x64 用于帧差异 image.find_displacement())
								# sensor.B128X64: 128x64 (用于帧差异 image.find_displacement())
								# sensor.B128X128: 128x128 (用于帧差异 image.find_displacement())
								# sensor.LCD: 128x160 (用于LCD扩展板)
								# sensor.QQVGA2: 128x160 (用于LCD扩展板)
# sensor.WVGA: 720x480 (用于 MT9V034)
# sensor.WVGA2:752x480 (用于 MT9V034)
# sensor.SVGA: 800x600 (仅用于 OV5640 感光元件)
# sensor.XGA: 1024x768 (仅用于 OV5640 感光元件)
# sensor.SXGA: 1280x1024 (仅用于 OV5640 感光元件)
# Sensor.UXGA: 1600x1200 (仅用于 OV5640 感光元件)
# sensor.HD: 1280x720 (仅用于 OV5640 感光元件)
# sensor.FHD: 1920x1080 (仅用于 OV5640 感光元件)
# sensor.QHD: 2560x1440 (仅用于 OV5640 感光元件)
# sensor.QXGA: 2048x1536 (仅用于 OV5640 感光元件)
# sensor.WQXGA: 2560x1600 (仅用于 OV5640 感光元件)
# sensor.WQXGA2: 2592x1944 (仅用于 OV5640 感光元件)

sensor.set_windowing(roi)
#从当前分辨率得到子分辨率
roi=(x, y, z, w)  # 分别是左上角X坐标，Y坐标，宽度，高度
sensor.skip_frames(time = 2000) # 跳过2000s的帧，使新设置生效,等待感光元件稳定，并自动调节白平衡
sensor.set_auto_gain(False) # 关闭自动增益。默认开启的，在颜色识别中，一定要关闭白平衡。
sensor.set_auto_whitebal(False)
#关闭白平衡。白平衡是默认开启的，在颜色识别中，一定要关闭白平衡。
clock = time.clock() # 追踪帧率

while(True):
    clock.tick() # Track elapsed milliseconds between snapshots().
    img = sensor.snapshot() # 利用感光芯片拍摄一张图像

    blobs = img.find_blobs([black_threshold])
    #find_blobs(thresholds, invert=False, roi=Auto),thresholds为颜色阈值，
    #是一个元组，需要用括号［ ］括起来。invert=1,反转颜色阈值，invert=False默认
    #不反转。roi设置颜色识别的视野区域，roi是一个元组， roi = (x, y, w, h)，代表
    #从左上顶点(x,y)开始的宽为w高为h的矩形区域，roi不设置的话默认为整个图像视野。
    #这个函数返回一个列表，[0]代表识别到的目标颜色区域左上顶点的x坐标，［1］代表
    #左上顶点y坐标，［2］代表目标区域的宽，［3］代表目标区域的高，［4］代表目标
    #区域像素点的个数，［5］代表目标区域的中心点x坐标，［6］代表目标区域中心点y坐标，
    #［7］代表目标颜色区域的旋转角度（是弧度值，浮点型，列表其他元素是整型），
    #［8］代表与此目标区域交叉的目标个数，［9］代表颜色的编号（它可以用来分辨这个
    #区域是用哪个颜色阈值threshold识别出来的）。
    if blobs:
    #如果找到了目标颜色
        for b in blobs:
        #迭代找到的目标颜色区域
            # Draw a rect around the blob.
            img.draw_rectangle(b[0:4]) # rect
            #用矩形标记出目标颜色区域
            #img.draw_cross(b[5], b[6]) # cx, cy
            #使图像难以看清，故上句加#号
            #在目标颜色区域的中心画十字形标记
# sensor.set_hmirror(True)
#水平方向翻转
#sensor.set_vflip(True)
#垂直方向翻转
#API：find_blobs
#thresholds是颜色的阈值。这个参数是一个列表，可以包含多个颜色。在返回的色块对象#blob可以调用code方法，来判断是什么颜色的色块。
#roi是“感兴趣区”。
#x_stride 就是查找的色块的x方向上最小宽度的像素，默认为2。
#y_stride 就是查找的色块的y方向上最小宽度的像素，默认为1。
#area_threshold 面积阈值，如果色块被框起来的面积小于这个值，会被过滤掉。
#pixels_threshold 像素个数阈值，如果色块像素数量小于这个值，会被过滤掉
#merge 合并，如果设置为True，那么合并所有重叠的blob为一个。 注意：这会合并所有#的blob，无论是什么颜色的。如果你想混淆多种颜色的blob，只需要分别调用不同颜色阈#值的find_blobs。
#①：运算的速度，是很慢的，有些地方我们根本不需要扫描它。
#②：色块的数量，很多时候，会有很多延时差不多的色块过来干扰，导致追踪失败。

#以下是改进扫描算法的思想：
#①：首先做一次全幅图像的扫描，找到我们需要的色块。
#②：我们得到色块的信息：如色块的长、宽、及色块的位置
#③：我们只扫描色块周围的区域（ROI）
#④：假设在新的ROI找不到我们需要的色块，就重新来。
#这个方法类似于飞思卡尔的边缘检测。
#其实这个改进是非常简单的。因为我们需要的东西在microPython中全部都有。
#只需要拿到find_blobs的返回的东西就好啦。
    print(clock.fps()) # 注意: 你的OpenMV连到电脑后帧率大概为原来的一半
#如果断开电脑，帧率会增加

#对list进行拓展，高位补0
def Expand_String(str):
    while(len(str)<4):
        str.insert(0,'0')
    return str




全：
import sensor, image, time
from pyb import UART
from pyb import LED
#舵机from pyb import Servo
#pwmfrom pyb import Pin, Timer
#串口
uart = UART(3, 115200)
uart.init(115200, bits=8, parity=None, stop=1)  #8位数据位，无校验位，1位停止位
#led
red_led = LED(1)
green_led = LED(2)
#控制舵机
#s1 = Servo(1)
#pwm
#tim = Timer(4, freq=1000)
kernel_size = 1 # kernel width = (size*2)+1, kernel height = (size*2)+1
kernel = [-1, -1, -1,\
          -1, +8, -1,\
          -1, -1, -1]
thresholds = [(100, 255)] # grayscale thresholds
# 颜色追踪的例子，一定要控制环境的光，保持光线是稳定的。
black_threshold   = (0, 63, -10, 15, -10, 14)
                    #*(0, 63, -10, 15, -10, 14)
                    #(37, 65, -31, 11, -9, 57)
#设置黑色的阈值，括号里面的数值分别是L A B 的最大值和最小值（minL:0, maxL:100, minA:-128,
# maxA:127, minB:-128, maxB:127），LAB的值在图像左侧三个坐标图中选取。如果是灰度图，则只需
#设置（min, max）两个数字即可。

sensor.reset() # 初始化摄像头
sensor.set_pixformat(sensor.RGB565) # 格式为 RGB565.
sensor.set_framesize(sensor.QQVGA) # 使用 QQVGA 速度快一些
sensor.skip_frames(time = 2000) # 跳过2000ms，使新设置生效,并自动调节白平衡
sensor.set_auto_gain(False) # 关闭自动自动增益。默认开启的，在颜色识别中，一定要关闭白平衡。
sensor.set_auto_whitebal(False)
#关闭白平衡。白平衡是默认开启的，在颜色识别中，一定要关闭白平衡。
clock = time.clock() # 追踪帧率     #print(clock.fps())  输出帧率
#从当前分辨率得到子分辨率
winroi=(25, 0, 100, 100)  # 分别是左上角X坐标，Y坐标，宽度，高度
            #(81,20)
            #(51,50)
sensor.set_windowing(winroi)

while(True):
    clock.tick() 
    img = sensor.snapshot() # 从感光芯片获得一张图像
    #和上方二选一，识别圆形
#img = sensor.snapshot().lens_corr(1.8)
    img.morph(kernel_size,kernel)
img.binary(thresholds)
    #模糊滤波
    #img.gaussian(1)
    blobs = img.find_blobs([black_threshold])
    #find_blobs(thresholds, invert=False, roi=Auto),thresholds为颜色阈值，
    #是一个元组，需要用括号［ ］括起来。invert=1,反转颜色阈值，invert=False默认
    #不反转。roi设置颜色识别的视野区域，roi是一个元组， roi = (x, y, w, h)，代表
    #从左上顶点(x,y)开始的宽为w高为h的矩形区域，roi不设置的话默认为整个图像视野。
    #这个函数返回一个列表，[0]代表识别到的目标颜色区域左上顶点的x坐标，［1］代表
    #左上顶点y坐标，［2］代表目标区域的宽，［3］代表目标区域的高，［4］代表目标
    #区域像素点的个数，［5］代表目标区域的中心点x坐标，［6］代表目标区域中心点y坐标，
    #［7］代表目标颜色区域的旋转角度（是弧度值，浮点型，列表其他元素是整型），
    #［8］代表与此目标区域交叉的目标个数，［9］代表颜色的编号（它可以用来分辨这个
    #区域是用哪个颜色阈值threshold识别出来的）。
    #识别圆形
    #for c in img.find_circles(threshold = 400, x_margin = 17, y_margin = 17, r_margin = 17,r_min = 1, r_max = 8, r_step = 1):
     #       img.draw_circle(c.x(), c.y(), c.r(), color = (255, 0, 0))
      #      print(c)
#控制舵机    
#    for i in range(-90,90):
#        s1.angle(i)
#    for i in range(90,-90):
#        s1.angle(i)
#pwm
#    if(tim):
#        pwp = 0
#        if pwp < 90 :
#            pwp = pwp+5
#            ch1 = tim.channel(2, Timer.PWM, pin=Pin("P8"), pulse_width_percent=pwp)
#    else :
#        pwp = 0
#测距
#    if len(blobs) == 1:
#        b = blobs[0]
#        img.draw_rectangle(b[0:4]) # rect
#        img.draw_cross(b[5], b[6]) # cx, cy
#        Lm = (b[2]+b[3])/2
#        length = K/Lm
#        print(length)
    #如果找到了目标颜色    
    if blobs:
        #迭代找到的目标颜色区域
        for b in blobs:
            cx=int(b[5])
            cy=int(b[6])
            cz=b[4]
            if (4<cx<96)and(4<cy<96)and(12<cz<45):
                img.draw_rectangle(b[0:4])
                red_led.off()
                green_led.on()

                img_data = bytearray([0x2c,0x15,cx,cy,0x1a])

                uart.write(img_data)
                print(img_data)
    else:
        red_led.on()
        green_led.off()
        print("no found")
        uart.write("no found")



2021.5.22.17：16黑白纸片九点，可以
import sensor, image, time
from pyb import UART
from pyb import LED
import ustruct
#舵机from pyb import Servo
#pwmfrom pyb import Pin, Timer
black_threshold  = (0, 63, -10, 15, -10, 14)
gray_threshold = (60,120)
                  #0,100
#串口
uart = UART(3, 115200)
uart.init(115200, bits=8, parity=None, stop=1)  #8位数据位，无校验位，1位停止位
#led
red_led = LED(1)
green_led = LED(2)

sensor.reset() # 初始化摄像头
sensor.set_pixformat(sensor.GRAYSCALE) # 格式为 RGB565.
sensor.set_framesize(sensor.QVGA) # 使用 QQVGA 速度快一些
sensor.skip_frames(time = 2000) # 跳过2000ms，使新设置生效,并自动调节白平衡
sensor.set_auto_gain(False) # 关闭自动自动增益。默认开启的，在颜色识别中，一定要关闭白平衡。
sensor.set_auto_whitebal(False)
#关闭白平衡。白平衡是默认开启的，在颜色识别中，一定要关闭白平衡。
clock = time.clock() # 追踪帧率     #print(clock.fps())  输出帧率
#从当前分辨率得到子分辨率
winroi=(50, 0, 200, 200)  # 分别是左上角X坐标，Y坐标，宽度，高度
            #(81,20)
            #(51,50)
sensor.set_windowing(winroi)

while(True):
    clock.tick()
    img = sensor.snapshot() # 从感光芯片获得一张图像
    #img.morph(kernel_size,kernel)
    #img.binary(thresholds)
    img.gaussian(1)
    blobs = img.find_blobs([gray_threshold])
    if blobs:
        #迭代找到的目标颜色区域
        for b in blobs:
            cx=int(b[5])
            cy=int(b[6])
            cz=b[4]
            if (4<cx<196)and(4<cy<196)and(35<cz<90):
                red_led.off()
                green_led.on()
                img.draw_rectangle(b[0:4]) # rect
                cx = int(b[5])
                cy = int(b[6])
                data = bytearray([0x2c,0x15,cx,cy,0x1a])
                uart.write(data)

    else:
        red_led.on()
        green_led.off()
